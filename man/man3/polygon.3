.\" 
.\"									
.\"	Copyright (c) 1987,1988,1989,1990,1991,1992   AT&T		
.\"			All Rights Reserved				
.\"									
.\"	  THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF AT&T.		
.\"	    The copyright notice above does not evidence any		
.\"	   actual or intended publication of such source code.		
.\"									
.\" 
.ds ZZ APPLICATION DEVELOPMENT PACKAGE
.TH POLYGON 3R
.XE "polyf()"
.XE "ptinpoly()"
.SH NAME
polyf, ptinpoly \- polygon routines
.SH SYNOPSIS
.ft B
int polyf (bp, poly, np, t, f)
.sp
int ptinpoly (pt, poly, np)
.sp
Point pt;
.br
Bitmap *bp;
.br
Point poly[ ];
.br
short np;
.br
Texture *t;
.br
Code f;	
.SH DESCRIPTION
The
.I polyf
function
is used to fill a closed polygon defined by the
.I np
Points in the array of Points
.IR poly .
The Points are absolute with respect to the Bitmap
.I bp.
The polygon is filled with the Texture
.I t
using Code
.I f.
The
.I polyf
call
returns 0 if the polygon is filled and -1 if a memory allocation
error occurred during processing in which the case the polygon
is not filled.
.PP
The
.I ptinpoly
call
determines whether the Point
.I pt
is contained in the polygon defined by
.I poly
and
.I np.
The
.I ptinpoly
function
returns 1 if the Point is inside the polygon,
0 if the Point is not inside the polygon,
and -1 if a memory allocation error occurs.
.PP
The polygon can consist of an arbitrary number of filled and unfilled
regions.
For example a donut shape could be formed
without affecting
the portion of the Bitmap corresponding to the hole of the donut.
This permits a preservation of any background information previously
placed in the Bitmap.
The array of Points
.I poly
can have an arbitrary number of alternating filled and unfilled regions with
each region delimited
by a Point whose x-coordinate has a value of
.I \s-1POLY_F\s+1
( defined in \f3dmd.h\f1).
This Point in
.I poly
is ignored and merely serves as a flag indicating
the start of a new region.
There is always an assumed line connecting the first and last Point
of each region.
.SH EXAMPLE
The following code permits interactive drawing of a
a polygon with interior regions, fills it, and then
uses \f2ptinpoly\f1 to determine if the mouse is inside the polygon.
.PP
.RS 3
.nf
\s-1
.ft CM
#include <dmd.h>

Point npoly[1000];

main()
{
	register int i, j;

	request (MOUSE|KBD);
	for( i = 0; i < 1000;){
		wait (MOUSE);
		if( button1 () ){
			npoly[i++] = mouse.xy;
			point (&display, mouse.xy,
				F_STORE);
			sleep (10);
			continue;
		}
		if( button2 () ){
			npoly[i++].x = POLY_F;
			continue;
		}
		if( button3 () ) break;
	}
	polyf (&display, npoly, i, &T_black,
		F_STORE);
	while( kbdchar () == -1 ){
		wait (MOUSE);
		if( button1() && ptinpoly
			(mouse.xy, npoly, i) )
			ringbell();
	}
}
\fR
.fi
.RE
\s+1
