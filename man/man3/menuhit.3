.\" 
.\"									
.\"	Copyright (c) 1987,1988,1989,1990,1991,1992   AT&T		
.\"			All Rights Reserved				
.\"									
.\"	  THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF AT&T.		
.\"	    The copyright notice above does not evidence any		
.\"	   actual or intended publication of such source code.		
.\"									
.\" 
.ds ZZ APPLICATION DEVELOPMENT PACKAGE
.TH MENUHIT 3R
.XE "menuhit()"
.SH NAME
menuhit \- present user with menu and get selection
.SH SYNOPSIS
.ft B
int menuhit (m, n) 
.sp
Menu *m;  
.br
int n;
.PP
.nf
\s-1
.ft CM
typedef struct Menu {
  char  **item;       /* string array, ending with 0 */
  short prevhit;       /* retained from previous call */
  short prevtop;       /* retained from previous call */
  char  *(*generator)(); /* used if item == 0 */
} Menu;
.ft R
.fi
\s+1
.SH DESCRIPTION
The
.I menuhit
function
presents the user with a menu specified by the Menu pointer
.I m
and returns an integer indicating the selection made,
or -1 for no selection.
The
.I n
argument
specifies which button to use for the interaction: 1, 2 or 3.
The
.I menuhit
function
assumes that the button is already depressed when it is called.
The user makes a selection by lifting the button when the cursor
points to the desired selection.
Lifting the button outside the menu indicates no selection.
.PP
The maximum number of menu items displayed at any one time is sixteen items.
When the number of items is 16 or less,
all of the items are displayed and are centered one entry per line in the menu.
This is the normal menu mode.
When there are more than 16 menu items to be displayed, the menu becomes a 
.B scrolling
menu.
The left portion of the menu contains a scroll bar which is 
used for scrolling quickly through the menu selections.
The vertical size of the scroll bar is an indication of the size
of the user's view of the menu (16 items) relative to the number
of selections in the entire menu.  
.PP
There are two ways to scroll through the menu items.
The first is to move the mouse cursor to the left side of the menu
into the scroll bar area.
By moving the mouse cursor up or down within the scroll bar area the menu items
will scroll accordingly.
The second method used to scroll through the menu 
items is to place the mouse cursor on the top or bottom of the menu
list.  The menu will scroll up or down by one item at a time if 
there are additional items to be displayed in that direction.
.PP
Menus may be generated dynamically from a program by initializing the generator 
function specified in the Menu structure.
If
.I item
is set to 0 when \f2menuhit\f1 is called,
then the routine specified by generator
is called with one parameter which is an integer index beginning at 0.
The generator must return a pointer to a character string containing the text
for the menu selection.
This generator function is called repeatedly 
with the index increasing by 1 until the generator returns a \s-1NULL\s+1,
indicating the end of the menu selections.
The generator function is called
each time that the \f2menuhit\f1 routine is called with item set to 0 or \s-1NULL\s+1.
.PP
Another facility provided by
.I menuhit
is the notion of a spread character.
A spread character is any ascii character with the high-order bit set.
The spread character acts somewhat like a spring pushing against the text
and borders within a menu entry.
The spread character can be placed at the beginning, middle, or end
of the string defining the menu entry.
If placed at the beginning of the string,
the text in the menu item will be right-justified.
If placed at the end of the string,
the text will be left justified.
If placed in the middle of the string, the text on each
side of the spread character will be pushed against the menu border.
In each of the cases,
the space created by the spread character will be filled in with
the ascii character contained in the spread character.
For entries without a spread character,
the default is to have the text centered.
.PP
Whenever a menu is displayed, the original screen image obscured by the menu is
saved in the terminal and then later restored when the menu disappears.
If the terminal is
out of memory and therefore cannot save the screen image,
then the menu will be displayed in \s-1XOR\s+1 (exclusive or) mode on top of the existing screen image.
Menu items may still be selected in this mode but the items might be hard to read.
To remedy this problem,
memory must be freed up by either deleting or
reshaping \f2layers\f1 before the menu is displayed.
.SH EXAMPLE
The following example includes both a menu with the spread character
and a menu that is dynamically generated.
.PP
.RS 0
\s-1
.nf
.ft CM
#include <dmd.h>

char *menutext[] = {
	"left\e240",           /* space char with
	                   high bit set */
	"\e256right",          /* . char with high
	                          bit set */
	"middle",
	"left\e337right",      /* _ char with high
	                          bit set */
	"a very long string",
	NULL };
Menu menu = { menutext };      /* static menu */

/*	Note the above menu will appear as:

       --------------------
       |left              |
       |.............right|
       |      middle      |
       |left_________right|
       |a very long string|
       --------------------
*/

static char digits[50];
static int index;
#define MAXDIGIT 25

pic9( n )
long n;
{
	if(n/10) pic9 (n/10);
	digits[index++] = "0123456789"[n%10];
}
.bp
char *
decimal(i)
long i;
{
	index = 0;
	pic9 ((long)i);
	digits[index] = '\e0';
	return digits;
}
char *
generate(i)
int i;
{
	if( i > MAXDIGIT ) return NULL;
	return decimal (i);
}

Menu menugen = {0, 0, 0, generate};
            /* dynamically generated menu */


main()
{
	int m;

	request (MOUSE);
	while( !bttn3() )
		wait (MOUSE);
	m = menuhit (&menu, 3);
	if ( m == 0 )
		exit();
	while( !bttn2() )
		wait (MOUSE);
	m = menuhit (&menugen, 2);
}
\fR
.fi
.RE
\s+1
.SH SEE ALSO
layers(1).
